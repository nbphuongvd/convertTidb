spring.application.name=convertTidb
server.port=9666

# Connect DB
#spring.datasource.url = jdbc:oracle:thin:@//localhost:1521/ORCLPDB1
#spring.datasource.username = billing
#spring.datasource.password = V2DY1/8c9U4ciQ==
#spring.datasource.driver-class = oracle.jdbc.driver.OracleDriver
#spring.jpa.hibernate.ddl-auto = none
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
#spring.datasource.hikari.connection-timeout=60000
#spring.datasource.hikari.maximum-pool-size=5

# ===================== Oracle JDBC =====================
spring.datasource.url=jdbc:oracle:thin:@//103.109.43.112:1521/ORCLPDB1
spring.datasource.username=billing
spring.datasource.password=V2DY1/8c9U4ciQ==
#spring.datasource.password=ENC(63pHXFwwv2M370QgG79aoK8kjHM0cSmtteTWGogUPMGVwlab40TkVWE0gGg4RfXONAbG8GvuAOO7ylUKfqEXNg==)
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

# ===================== JPA/Hibernate =====================
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# ===================== HikariCP (t\u1ED1i \u01B0u theo m\u1EE5c tiêu 200 rps, DB time ~0.2s) =====================
spring.datasource.hikari.pool-name=HikariPool-1
spring.datasource.hikari.maximum-pool-size=80
spring.datasource.hikari.minimum-idle=10
 # 15s: fail-fast khi thi\u1EBFu connection
spring.datasource.hikari.connection-timeout=15000      
spring.datasource.hikari.validation-timeout=5000
 # 10 phút
spring.datasource.hikari.idle-timeout=600000           
 # 25 phút (< timeout phía DB/LB)
spring.datasource.hikari.max-lifetime=1500000  




# Cấu hình Kafka Broker
spring.kafka.bootstrap-servers=14.225.36.5:9093

# Cấu hình Producer
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
# Đảm bảo tất cả broker xác nhận trước khi gửi thành công
spring.kafka.producer.acks=all  
# Số lần retry nếu gửi thất bại
spring.kafka.producer.retries=3
# Cấu hình Consumer
spring.kafka.consumer.group-id=awaitility-group
# Đọc từ đầu nếu chưa có offset
spring.kafka.consumer.auto-offset-reset=earliest 
# Tự quản lý offset thay vì commit tự động
spring.kafka.consumer.enable-auto-commit=false  
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.schema.registry.url=http://14.225.36.5:8081
# Nếu chưa generate Avro class → để false (GenericRecord)
spring.kafka.consumer.properties.specific.avro.reader=false
# Giới hạn số message lấy về mỗi lần poll
spring.kafka.consumer.max-poll-records=1
# Tối thiểu 50KB data mỗi fetch
spring.kafka.consumer.fetch-min-size=0B
# Đợi tối đa 500ms nếu chưa đủ data
spring.kafka.consumer.fetch-max-wait=100ms
#logging.level.org.apache.kafka=on
#logging.level.org.springframework.kafka=on

app.topicGateway=wr.RPT.ISOMESSAGE
app.groupIDGateway=awaitility-group

app.topicConnector=wr.RPT.TBL_PAYMENT
app.groupIDConnector=awaitility-group

app.topicCache=wr.RPT.V_APG10_TRANS
app.groupIDCache=awaitility-group
